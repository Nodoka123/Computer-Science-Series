{"remainingRequest":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/babel-loader/lib/index.js!/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/eslint-loader/index.js??ref--13-0!/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep03/js/main.js","dependencies":[{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep03/js/main.js","mtime":1548280420290},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/babel-loader/lib/index.js","mtime":1548279913642},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/eslint-loader/index.js","mtime":1548279914305}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n\n/**\n * K-means clustering algorithm\n */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-param-reassign */\nimport Util from './utility';\n\nvar TWEEN = require('@tweenjs/tween.js');\n\nvar World = {};\nvar BG_COLOR = '#292E34';\nvar DEFAULT_COLOR = '#363D45';\nvar frameId;\n\nfunction animate() {\n  frameId = window.requestAnimationFrame(animate);\n  TWEEN.update();\n  render(World.canvas);\n}\n\nfunction initialize(numPoints, numCentroids, canvas, maxSteps) {\n  TWEEN.removeAll();\n  var width = canvas.width;\n  var height = canvas.height;\n  World.numCentroids = numCentroids;\n  World.numPoints = numPoints;\n  World.numSteps = maxSteps;\n  World.centroids = [];\n  World.canvas = canvas;\n  setCentroids(width, height);\n  setPoints(width, height); // kick off animation loop for tweening\n\n  if (frameId) window.cancelAnimationFrame(frameId);\n  animate();\n}\n\nfunction setPoints(width, height) {\n  // Build world of random points\n  World.points = Util.getGroupedDistribution(width, height, World.numPoints, World.numCentroids * (Math.random() * 2));\n}\n\nfunction setCentroids(width, height) {\n  // Place clusters randomly\n  for (var i = 0; i < World.numCentroids; i += 1) {\n    var hue = i * 50 % 360; // Move through color wheel\n\n    World.centroids.push({\n      x: Math.random() * width,\n      y: Math.random() * height,\n      bucket: [],\n      hue: hue\n    });\n  }\n}\n\nfunction render(canvas) {\n  var ctx = canvas.getContext('2d');\n  ctx.fillStyle = BG_COLOR;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  World.points.forEach(function (point) {\n    var color = DEFAULT_COLOR;\n\n    if (point.hue !== undefined) {\n      color = \"hsl(\".concat(point.hue, \", 70%, 60%)\");\n    }\n\n    drawPoint(ctx, point.x, point.y, 5, color);\n  });\n  World.centroids.forEach(function (centroid) {\n    drawPoint(ctx, centroid.x, centroid.y, 15, \"hsl(\".concat(centroid.hue, \", 80%, 50%)\"));\n  });\n}\n\nvar numberCompleted = 0;\n\nfunction autoComplete() {\n  numberCompleted += 1;\n\n  if (numberCompleted >= World.numCentroids && World.numSteps > 0) {\n    step(true);\n    numberCompleted = 0;\n    World.numSteps -= 1;\n  }\n}\n\nfunction step(runThrough) {\n  // Make buckets\n  for (var i = 0; i < World.numCentroids; i += 1) {\n    World.centroids[i].prevBucket = World.centroids[i].bucket; // save prev\n\n    World.centroids[i].bucket = []; // clear bucket for each centroid\n  } // Find closest centroids\n\n\n  World.points.forEach(function (point) {\n    var bestCentroid = -1; // index of best centroid\n\n    var bestDistance = Number.MAX_VALUE;\n\n    for (var _i = 0; _i < World.numCentroids; _i += 1) {\n      var dist = Util.getDistance(point, World.centroids[_i]);\n\n      if (dist < bestDistance) {\n        bestDistance = dist;\n        bestCentroid = _i;\n      }\n    } // Add point to its corresponding centroid bucket\n\n\n    World.centroids[bestCentroid].bucket.push(point); // Color the point to match it's centroid\n\n    point.hue = World.centroids[bestCentroid].hue;\n  }); // Update centroid locations\n\n  World.centroids.forEach(function (centroid) {\n    var newPos = Util.getAveragePos(centroid.bucket); // Setup tweening animation\n\n    var tween = new TWEEN.Tween(centroid);\n    tween.to({\n      x: newPos.x,\n      y: newPos.y\n    }, 1000).easing(TWEEN.Easing.Quadratic.Out).start().onComplete(function () {\n      if (runThrough) {\n        autoComplete();\n      }\n    });\n  });\n}\n\nfunction drawPoint(ctx, x, y, radius, color) {\n  var context = ctx;\n  context.beginPath();\n  context.arc(x, y, radius, 0, 2 * Math.PI);\n  context.fillStyle = color;\n  context.fill();\n}\n\nexport default {\n  initialize: initialize,\n  render: render,\n  step: step\n};",{"version":3,"sources":["/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep03/js/main.js"],"names":["Util","TWEEN","require","World","BG_COLOR","DEFAULT_COLOR","frameId","animate","window","requestAnimationFrame","update","render","canvas","initialize","numPoints","numCentroids","maxSteps","removeAll","width","height","numSteps","centroids","setCentroids","setPoints","cancelAnimationFrame","points","getGroupedDistribution","Math","random","i","hue","push","x","y","bucket","ctx","getContext","fillStyle","fillRect","forEach","point","color","undefined","drawPoint","centroid","numberCompleted","autoComplete","step","runThrough","prevBucket","bestCentroid","bestDistance","Number","MAX_VALUE","dist","getDistance","newPos","getAveragePos","tween","Tween","to","easing","Easing","Quadratic","Out","start","onComplete","radius","context","beginPath","arc","PI","fill"],"mappings":"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","sourcesContent":["/**\n * K-means clustering algorithm\n */\n\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\nimport Util from './utility'\nvar TWEEN = require('@tweenjs/tween.js')\n\nconst World = {}\nconst BG_COLOR = '#292E34'\nconst DEFAULT_COLOR = '#363D45'\nlet frameId\n\nfunction animate () {\n  frameId = window.requestAnimationFrame(animate)\n  TWEEN.update()\n  render(World.canvas)\n}\n\nfunction initialize (numPoints, numCentroids, canvas, maxSteps) {\n  TWEEN.removeAll()\n  const width = canvas.width\n  const height = canvas.height\n  World.numCentroids = numCentroids\n  World.numPoints = numPoints\n  World.numSteps = maxSteps\n  World.centroids = []\n  World.canvas = canvas\n  setCentroids(width, height)\n  setPoints(width, height)\n  // kick off animation loop for tweening\n  if (frameId) window.cancelAnimationFrame(frameId)\n  animate()\n}\n\nfunction setPoints (width, height) {\n  // Build world of random points\n  World.points = Util.getGroupedDistribution(\n    width,\n    height,\n    World.numPoints,\n    World.numCentroids * (Math.random() * 2)\n  )\n}\n\nfunction setCentroids (width, height) {\n  // Place clusters randomly\n  for (let i = 0; i < World.numCentroids; i += 1) {\n    const hue = (i * 50) % 360 // Move through color wheel\n    World.centroids.push(\n      {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        bucket: [],\n        hue\n      }\n    )\n  }\n}\n\nfunction render (canvas) {\n  const ctx = canvas.getContext('2d')\n  ctx.fillStyle = BG_COLOR\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\n  World.points.forEach((point) => {\n    let color = DEFAULT_COLOR\n    if (point.hue !== undefined) { color = `hsl(${point.hue}, 70%, 60%)` }\n    drawPoint(ctx, point.x, point.y, 5, color)\n  })\n  World.centroids.forEach((centroid) => {\n    drawPoint(ctx, centroid.x, centroid.y, 15, `hsl(${centroid.hue}, 80%, 50%)`)\n  })\n}\n\nlet numberCompleted = 0\nfunction autoComplete () {\n  numberCompleted += 1\n  if (numberCompleted >= World.numCentroids && World.numSteps > 0) {\n    step(true)\n    numberCompleted = 0\n    World.numSteps -= 1\n  }\n}\n\nfunction step (runThrough) {\n  // Make buckets\n  for (let i = 0; i < World.numCentroids; i += 1) {\n    World.centroids[i].prevBucket = World.centroids[i].bucket // save prev\n    World.centroids[i].bucket = [] // clear bucket for each centroid\n  }\n  // Find closest centroids\n  World.points.forEach((point) => {\n    let bestCentroid = -1 // index of best centroid\n    let bestDistance = Number.MAX_VALUE\n    for (let i = 0; i < World.numCentroids; i += 1) {\n      const dist = Util.getDistance(point, World.centroids[i])\n      if (dist < bestDistance) {\n        bestDistance = dist\n        bestCentroid = i\n      }\n    }\n    // Add point to its corresponding centroid bucket\n    World.centroids[bestCentroid].bucket.push(point)\n    // Color the point to match it's centroid\n    point.hue = World.centroids[bestCentroid].hue\n  })\n  // Update centroid locations\n  World.centroids.forEach((centroid) => {\n    const newPos = Util.getAveragePos(centroid.bucket)\n    // Setup tweening animation\n    const tween = new TWEEN.Tween(centroid)\n    tween.to({ x: newPos.x, y: newPos.y }, 1000)\n      .easing(TWEEN.Easing.Quadratic.Out)\n      .start()\n      .onComplete(() => {\n        if (runThrough) {\n          autoComplete()\n        }\n      })\n  })\n}\n\nfunction drawPoint (ctx, x, y, radius, color) {\n  const context = ctx\n  context.beginPath()\n  context.arc(x, y, radius, 0, 2 * Math.PI)\n  context.fillStyle = color\n  context.fill()\n}\n\nexport default { initialize, render, step }\n"]}]}