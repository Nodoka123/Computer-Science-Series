{"remainingRequest":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/babel-loader/lib/index.js!/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/eslint-loader/index.js??ref--13-0!/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep01/js/StateSpace.js","dependencies":[{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep01/js/StateSpace.js","mtime":1548279915443},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/babel-loader/lib/index.js","mtime":1548279913642},{"path":"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/eslint-loader/index.js","mtime":1548279914305}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport State from './State';\n/**\n * The StateSpace2D object contains all data\n * pertaining to the layout of states and valid successors\n */\n\nvar StateSpace =\n/*#__PURE__*/\nfunction () {\n  function StateSpace() {\n    _classCallCheck(this, StateSpace);\n\n    this.scores = [];\n    this.maxScore = 0;\n  }\n\n  _createClass(StateSpace, [{\n    key: \"getSuccessors\",\n\n    /**\n     * Computes valid successor states\n     * of the current state\n     * @param  state  [current state]\n     * @param  stepSize  [number of steps from current]\n     * @return states [all successors of state]\n     */\n    value: function getSuccessors(state, stepSize) {\n      var states = [];\n      var step = stepSize;\n      var x = state.coords[0] - step; // get start index\n\n      x = x < 0 ? 0 : x;\n\n      while (x <= state.coords[0] + step) {\n        if (x !== state.coords[0] && state.coords[0] < this.scores.length) {\n          states.push(new State([x], this.scores[x]));\n        }\n\n        x += 1;\n      }\n\n      return states;\n    }\n    /**\n     * Generates a random valid state from the\n     * state space\n     * @return state [the random state]\n     */\n\n  }, {\n    key: \"randomState\",\n    value: function randomState() {\n      var x = Math.round(Math.random() * (this.scores.length - 1));\n      var state = new State([x], this.scores[x]);\n      return state;\n    }\n  }, {\n    key: \"max\",\n    set: function set(score) {\n      if (score > this.maxScore) {\n        this.maxScore = score;\n      }\n    }\n  }]);\n\n  return StateSpace;\n}();\n\nexport { StateSpace as default };",{"version":3,"sources":["/Users/Eschirtz/Documents/02_Local_Personal/01_Code/02_Projects/01_Videos/Computer-Science-Series/src/views/ep01/js/StateSpace.js"],"names":["State","StateSpace","scores","maxScore","state","stepSize","states","step","x","coords","length","push","Math","round","random","score"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA;;;;;IAIqBC,U;;;AACnB,wBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACD;;;;;AAMD;;;;;;;kCAOcC,K,EAAOC,Q,EAAU;AAC7B,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGF,QAAb;AACA,UAAIG,CAAC,GAAGJ,KAAK,CAACK,MAAN,CAAa,CAAb,IAAkBF,IAA1B,CAH6B,CAGG;;AAChCC,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYA,CAAhB;;AACA,aAAOA,CAAC,IAAIJ,KAAK,CAACK,MAAN,CAAa,CAAb,IAAkBF,IAA9B,EAAoC;AAClC,YAAIC,CAAC,KAAKJ,KAAK,CAACK,MAAN,CAAa,CAAb,CAAN,IAAyBL,KAAK,CAACK,MAAN,CAAa,CAAb,IAAkB,KAAKP,MAAL,CAAYQ,MAA3D,EAAmE;AACjEJ,UAAAA,MAAM,CAACK,IAAP,CAAY,IAAIX,KAAJ,CAAU,CAACQ,CAAD,CAAV,EAAe,KAAKN,MAAL,CAAYM,CAAZ,CAAf,CAAZ;AACD;;AACDA,QAAAA,CAAC,IAAI,CAAL;AACD;;AACD,aAAOF,MAAP;AACD;AACD;;;;;;;;kCAKc;AACZ,UAAME,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKZ,MAAL,CAAYQ,MAAZ,GAAqB,CAAtC,CAAX,CAAV;AACA,UAAMN,KAAK,GAAG,IAAIJ,KAAJ,CAAU,CAACQ,CAAD,CAAV,EAAe,KAAKN,MAAL,CAAYM,CAAZ,CAAf,CAAd;AACA,aAAOJ,KAAP;AACD;;;sBAlCOW,K,EAAO;AACb,UAAIA,KAAK,GAAG,KAAKZ,QAAjB,EAA2B;AACzB,aAAKA,QAAL,GAAgBY,KAAhB;AACD;AACF;;;;;;SATkBd,U","sourcesContent":["import State from './State';\n/**\n * The StateSpace2D object contains all data\n * pertaining to the layout of states and valid successors\n */\nexport default class StateSpace {\n  constructor() {\n    this.scores = [];\n    this.maxScore = 0;\n  }\n  set max(score) {\n    if (score > this.maxScore) {\n      this.maxScore = score;\n    }\n  }\n  /**\n   * Computes valid successor states\n   * of the current state\n   * @param  state  [current state]\n   * @param  stepSize  [number of steps from current]\n   * @return states [all successors of state]\n   */\n  getSuccessors(state, stepSize) {\n    const states = [];\n    const step = stepSize;\n    let x = state.coords[0] - step; // get start index\n    x = x < 0 ? 0 : x;\n    while (x <= state.coords[0] + step) {\n      if (x !== state.coords[0] && state.coords[0] < this.scores.length) {\n        states.push(new State([x], this.scores[x]));\n      }\n      x += 1;\n    }\n    return states;\n  }\n  /**\n   * Generates a random valid state from the\n   * state space\n   * @return state [the random state]\n   */\n  randomState() {\n    const x = Math.round(Math.random() * (this.scores.length - 1));\n    const state = new State([x], this.scores[x]);\n    return state;\n  }\n}\n"]}]}